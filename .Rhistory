sup_x <- x[c(t_min:length(x))]
sum_x <- (x + sup_x)[c(1: t_max)]
x <- 2 * x * sup_x
x <- x[c(1: t_max)]
y <- log(x / (new_x * sum_x))
return(y)
} else if (method == "Geom"){
t_min <- 1 + 2 * dt
t_max = length(x) - 2 * dt
new_x <- x[c((dt + 1): (length(x) - dt))]
sup_x <- x[c(t_min:length(x))]
x <- x * sup_x
x <- x[c(1: t_max)]
y <- log(x / (new_x ** 2))
return(y)
} else {
t_min <- 1 + 2 * dt
t_max = length(x) - 2 * dt
new_x <- x[c((dt + 1): (length(x) - dt))]
sup_x <- x[c(t_min:length(x))]
x <- x + sup_x
x <- x[c(1: t_max)]
y <- log(x / (2 * new_x))
return(y)
}
}
}
#-----------------------(3)
t <- seq(0, 10, 0.1)
x <- 2 * t + 3 + sin(2 * t)
x_mean <- mean(x)
xn <- out_of_trend(x, 2, method = "Arifm")
xn_mean <- mean(xn)
xn_mean
#-----------------------(4)
alter_johns <- function(y){
result <- c()
for (tau in c(1:length(y) - 1)){
sup_y <- y[c((1 + tau):length(y))]
sup_y <- sup_y - y[c(1:(length(y) - tau))]
a_tau <- sum(sup_y) / (length(y) - tau)
result <- c(result, a_tau)
}
return(result)
}
#-----------------------(5)
xn_alter <- alter_johns(xn)
which.min(xn_alter)
#-----------------------(6)
my_vector <- alter_johns(df$ATVI.Open)
my_vector_ts <- ts(data = my_vector, start = c(1993, 10, 25),
frequency = 1, names = "ATVI Open")
library(ggplot2)
plot(my_vector_ts)
SIM <- function(A, u0, f, n_iter=10e5, eps=10e-7){
B <- diag(x = 1, nrow = nrow(A)) - A
u <- u0
for (i in c(1:n_iter)){
if (max(abs(B %*% u + f - u)) < eps){
return(u)
} else {
u <- B %*% u + f
}
}
return(u)
}
A <- matrix(c(1, 4, 2, 3), nrow = 2, ncol = 2)
f <- c(0.2, -0.8)
u <- c(12, 4)
SIM(A, u, f)
A %*% u
A %*% u + f
max(abs(A %*% u + f - u)) < 10e-7
u <- A %*% u + f
max(abs(A %*% u + f - u)) < 10e-7
u <- A %*% u + f
SIM <- function(A, u0, f, n_iter=10e5, eps=10e-7){
B <- diag(x = 1, nrow = nrow(A)) - A
u <- u0
for (i in c(1:n_iter)){
if (max(abs(B %*% u + f - u)) < eps == T){
SIM <- function(A, u0, f, n_iter=10e5, eps=10e-7){
B <- diag(x = 1, nrow = nrow(A)) - A
u <- u0
for (i in c(1:n_iter)){
if (max(abs(B %*% u + f - u)) < eps){
return(u)
} else {
u <- B %*% u + f
}
}
return
}
u <- c(10, 2)
SIM(A, u, f)
SIM <- function(A, u0, f, n_iter = 10e5, eps = 10e-7){
B <- diag(x = 1, nrow = nrow(A)) - A
u <- u0
for (i in c(1:n_iter)){
if (is.na(max(abs(B %*% u + f - u)) < eps)){
return(u)
} else if (max(abs(B %*% u + f - u)) < eps){
return(u)
} else {
u <- B %*% u + f
}
}
return
}
SIM(A, u, f)
u <- c(2, 0)
f <- c(5, 7.5)
SIM(A, u, f)
SIM <- function(A, u0, f, n_iter = 10e5, eps = 10e-7){
u <- u0
for (i in c(1:n_iter)){
if (is.na(max(abs(B %*% u + f - u)) < eps)){
return(u)
} else if (max(abs(B %*% u + f - u)) < eps){
return(u)
} else {
u <- f + A %*% u
}
}
return(u)
}
SIM(A, u, f)
SIM <- function(A, u0, f, n_iter = 10e5, eps = 10e-7){
u <- u0
for (i in c(1:n_iter)){
if (is.na(max(abs(f + A %*% u - u)) < eps)){
return(u)
} else if (max(abs(f + A %*% u - u)) < eps){
return(u)
} else {
u <- f + A %*% u
}
}
return(u)
}
SIM(A, u, f)
SIM <- function(A, u0, f, n_iter = 10e5, eps = 10e-7){
u <- f
for (i in c(1:n_iter)){
if (is.na(max(abs(f + A %*% u - u)) < eps)){
print("Решения нет")
return(u)
} else if (max(abs(f + A %*% u - u)) < eps){
return(u)
} else {
u <- f + A %*% u
}
}
return(u)
}
SIM(A, u, f)
diag(1, nrow=2, ncol=2)
A <- matrix(c(1,4,2,3), nrow=2, ncol=2)
diag(A)
alpha <- A
diag(alpha) <- 0
View(alpha)
View(alpha)
alpha <- A
alpha / diag(alpha)
View(A)
View(A)
alpha <- alpha / diag(alpha)
View(A)
View(A)
View(alpha)
SIM <- function(A, u0, f, n_iter = 10e5, eps = 10e-7){
alpha <- A / diag(A)
diag(alpha) <- 0
beta <- f / diag(A)
for (i in c(1:n_iter)){
if (is.na(max(abs(beta + alpha %*% u - u)) < eps)){
print("Решения нет")
return(u)
} else if (max(abs(beta + alpha %*% u - u)) < eps){
return(u)
} else {
u <- beta + alpha %*% u
}
}
return(u)
}
A <- matrix(c(1, 4, 2, 3), nrows=2, ncols=2)
A <- matrix(c(1, 4, 2, 3), nrow=2, ncol=2)
u0 <- (3, 4.5)
u0 <- c(3, 4.5)
f <- c(9.5, 9)
SIM(A, u0, f)
SIM <- function(A, u0, f, n_iter = 10e5, eps = 10e-7){
alpha <- A / diag(A)
diag(alpha) <- 0
beta <- f / diag(A)
u <- u0
for (i in c(1:n_iter)){
if (is.na(max(abs(beta + alpha %*% u - u)) < eps)){
print("Решения нет")
return(u)
} else if (max(abs(beta + alpha %*% u - u)) < eps){
return(u)
} else {
u <- beta + alpha %*% u
}
}
return(u)
}
SIM(A, u0, f)
SIM <- function(A, u0, f, n_iter = 10e5, eps = 10e-7){
alpha <- A / diag(A)
diag(alpha) <- 0
beta <- f / diag(A)
u <- f
for (i in c(1:n_iter)){
if (is.na(max(abs(beta + alpha %*% u - u)) < eps)){
print("Решения нет")
return(u)
} else if (max(abs(beta + alpha %*% u - u)) < eps){
return(u)
} else {
u <- beta + alpha %*% u
}
}
return(u)
}
SIM(A, u0, f)
u <- u0
SIM <- function(A, u0, f, n_iter = 10e5, eps = 10e-7){
alpha <- A / diag(A)
diag(alpha) <- 0
beta <- f / diag(A)
u <- u0
for (i in c(1:n_iter)){
if (is.na(max(abs(beta + alpha %*% u - u)) < eps)){
print("Решения нет")
return(u)
} else if (max(abs(beta + alpha %*% u - u)) < eps){
return(u)
} else {
u <- beta + alpha %*% u
}
}
return(u)
}
SIM(A, u0, f)
A <- matrix(c(4, 1, 2, 3), nrow=2, ncol=3)
A <- matrix(c(4, 1, 2, 3), nrow=2, ncol=2)
u0 <- c(1, 1)
f <- (10.5, 11.5)
f <- c(10.5, 11.5)
SIM(A, u0, f)
View(A)
SIM <- function(A, u0, f, n_iter = 10e5, eps = 10e-7){
alpha <- A / diag(A)
diag(alpha) <- 0
beta <- f / diag(A)
u <- f
for (i in c(1:n_iter)){
if (is.na(max(abs(beta + alpha %*% u - u)) < eps)){
print("Решения нет")
return(u)
} else if (max(abs(beta + alpha %*% u - u)) < eps){
return(u)
} else {
u <- beta + alpha %*% u
}
}
return(u)
}
SIM(A, u0, f)
View(alpha)
View(A)
SIM <- function(A, u0, f, n_iter = 10e5, eps = 10e-7){
alpha <- A / diag(A)
diag(alpha) <- 0
beta <- f / diag(A)
u <- u0
for (i in c(1:n_iter)){
if (is.na(max(abs(beta + alpha %*% u - u)) < eps)){
print("Решения нет")
return(u)
} else if (max(abs(beta + alpha %*% u - u)) < eps){
return(u)
} else {
u <- beta + alpha %*% u
}
}
return(u)
}
SIM(A, u0, f)
A
u0
f
u0 <- c(0, 0)
SIM(A, u0, f)
A / diag(A)
alpha <- A / diag(A)
diag(alpha) <- 0
beta <- f / diag(A)
u <- u0
View(alpha)
max(abs(beta + alpha %*% u - u)
)
u <- beta + alpha %*% u
u
alpha %*% u
View(alpha)
u <- beta + alpha %*% u
u
u <- beta + alpha %*% u
u
u <- beta + alpha %*% u
u
u <- beta + alpha %*% u
u
u <- beta + alpha %*% u
u
u <- beta + alpha %*% u
u
u <- beta + alpha %*% u
u
u <- beta + alpha %*% u
u
SIM(A, u0, f)
SIM <- function(A, u0, f, n_iter = 10e5, eps = 10e-7){
alpha <- (-1) * A / diag(A)
diag(alpha) <- 0
beta <- f / diag(A)
u <- u0
for (i in c(1:n_iter)){
if (is.na(max(abs(beta + alpha %*% u - u)) < eps)){
print("Решения нет")
return(u)
} else if (max(abs(beta + alpha %*% u - u)) < eps){
return(u)
} else {
u <- beta + alpha %*% u
}
}
return(u)
}
SIM(A, u0, f)
library(quantmod)
library(stringr)
downloadable_stocks <- c("ATVI", "^IXIC")
getSymbols(Symbols = downloadable_stocks,
src = "yahoo",
from = as.Date.character("1900-01-01"))
df <- data.frame(get(downloadable_stocks[1]))
downloadable_stocks <- str_remove(downloadable_stocks,
"[:punct:\\^]")
rm(list = downloadable_stocks)
#-----------------------(2)
out_of_trend <- function(x, dt, method =
c("Arifm", "Geom", "Garm")){
if (length(x) < 3){
print("Error: vector x is too small (min length= 3)")
return()
} else if (dt > ceiling(length(x) / 2) - 1){
print("Error: dt-value is too big (max = ceiling(x / 2) - 1")
return()
} else if (!is.numeric(x) || !is.numeric(dt)){
print("Error: vector x or dt is not numeric")
return()
} else {
x <- x + min(x) + 1
if (method == "Garm"){
t_min <- 1 + 2 * dt
t_max = length(x) - 2 * dt
new_x <- x[c((dt + 1): (length(x) - dt))]
sup_x <- x[c(t_min:length(x))]
sum_x <- (x + sup_x)[c(1: t_max)]
x <- 2 * x * sup_x
x <- x[c(1: t_max)]
y <- log(x / (new_x * sum_x))
return(y)
} else if (method == "Geom"){
t_min <- 1 + 2 * dt
t_max = length(x) - 2 * dt
new_x <- x[c((dt + 1): (length(x) - dt))]
sup_x <- x[c(t_min:length(x))]
x <- x * sup_x
x <- x[c(1: t_max)]
y <- log(x / (new_x ** 2))
return(y)
} else {
t_min <- 1 + 2 * dt
t_max = length(x) - 2 * dt
new_x <- x[c((dt + 1): (length(x) - dt))]
sup_x <- x[c(t_min:length(x))]
x <- x + sup_x
x <- x[c(1: t_max)]
y <- log(x / (2 * new_x))
return(y)
}
}
}
#-----------------------(3)
t <- seq(0, 10, 0.1)
x <- 2 * t + 3 + sin(2 * t)
x_mean <- mean(x)
xn <- out_of_trend(x, 2, method = "Arifm")
xn_mean <- mean(xn)
xn_mean
#-----------------------(4)
alter_johns <- function(y){
result <- c()
for (tau in c(1:length(y) - 1)){
sup_y <- y[c((1 + tau):length(y))]
sup_y <- sup_y - y[c(1:(length(y) - tau))]
a_tau <- sum(sup_y) / (length(y) - tau)
result <- c(result, a_tau)
}
return(result)
}
#-----------------------(5)
xn_alter <- alter_johns(xn)
which.min(xn_alter)
#-----------------------(6)
my_vector <- alter_johns(df$ATVI.Open)
my_vector_ts <- ts(data = my_vector, start = c(1993, 10, 25),
frequency = 1, names = "ATVI Open")
library(ggplot2)
plot(my_vector_ts)
?plot
my_vector <- alter_johns(df$ATVI.Open)
my_vector_ts <- ts(data = my_vector, start = c(1993, 10, 25),
frequency = 1, names = "ATVI Open")
library(ggplot2)
plot(my_vector_ts, y = "Alter John's function")
View(df)
ggplot(data = NULL, aes(x = as.Date(row.names(df), format = "%Y-%m-%d"),
y = my_vector_ts))+
geom_line()
?ggplot
?geom_line
ggplot(data = NULL, aes(x = as.Date(row.names(df), format = "%Y-%m-%d"),
y = my_vector_ts, xlab("Time"), ylab("Alter John function")))+
geom_line()
y = my_vector_ts, label=(xlab("Time"), ylab("Alter John function")))+
ggplot(data = NULL, aes(x = as.Date(row.names(df), format = "%Y-%m-%d"),
y = my_vector_ts, label=(xlab("Time"), ylab("Alter John function"))))+
ggplot(data = NULL, aes(x = as.Date(row.names(df), format = "%Y-%m-%d"),
y = my_vector_ts, xlab("Time"), ylab("Alter John function")))+
geom_line()
ggplot(data = NULL, aes(x = as.Date(row.names(df), format = "%Y-%m-%d"),
y = my_vector_ts))+
geom_line(xlab("Time"), ylab("Alter John function"))
geom_line(aes(xlab("Time"), ylab("Alter John function"))
ggplot(data = NULL, aes(x = as.Date(row.names(df), format = "%Y-%m-%d"),
ggplot(data = NULL, aes(x = as.Date(row.names(df), format = "%Y-%m-%d"),
y = my_vector_ts))+
geom_line(aes(xlab("Time"), ylab("Alter John function")))
ggplot(data = NULL, aes(x = as.Date(row.names(df), format = "%Y-%m-%d"),
y = my_vector_ts))+
geom_line(aes(xlab("Time"), ylab("Alter John function")))
ggplot(data = NULL, aes(x = as.Date(row.names(df), format = "%Y-%m-%d"),
y = my_vector_ts))+
geom_line(aes(xlab("Time"), ylab("Alter John function")))
my_df <- data.frame(list(row.names(df), my_vector))
View(my_df)
colnames(my_df) <- c("Date", "Alter John function")
#my_vector_ts <- ts(data = my_vector, start = c(1993, 10, 25),
#                  frequency = 1, names = "ATVI Open")
ggplot(data = my_df, aes(x = as.Date(Date, format = "%Y-%m-%d"),
y = "Alter John function"))+
geom_line(aes(xlab("Time"), ylab("Alter John function")))
#my_vector_ts <- ts(data = my_vector, start = c(1993, 10, 25),
#                  frequency = 1, names = "ATVI Open")
ggplot(data = my_df, aes(x = as.Date(Date, format = "%Y-%m-%d"),
y = "Alter John function"))+
geom_line()
my_df <- data.frame(list(as.Date(row.names(df), format = "%Y-%m-%d"), my_vector))
my_df <- data.frame(list(as.Date(row.names(df), format = "%Y-%m-%d"), my_vector))
colnames(my_df) <- c("Date", "Alter John function")
#my_vector_ts <- ts(data = my_vector, start = c(1993, 10, 25),
#                  frequency = 1, names = "ATVI Open")
ggplot(data = my_df, aes(x = "Date", y = "Alter John function"))+
geom_line()
#my_vector_ts <- ts(data = my_vector, start = c(1993, 10, 25),
#                  frequency = 1, names = "ATVI Open")
ggplot(data = my_df, aes(x = Date, y = Alter_John_function))+
geom_line()
colnames(my_df) <- c("Date", "Alter_John_function")
#my_vector_ts <- ts(data = my_vector, start = c(1993, 10, 25),
#                  frequency = 1, names = "ATVI Open")
ggplot(data = my_df, aes(x = Date, y = Alter_John_function))+
geom_line()
#my_vector_ts <- ts(data = my_vector, start = c(1993, 10, 25),
#                  frequency = 1, names = "ATVI Open")
ggplot(data = my_df, aes(x = Date, y = Alter_John_function))+
geom_line()+
geom_point()
#my_vector_ts <- ts(data = my_vector, start = c(1993, 10, 25),
#                  frequency = 1, names = "ATVI Open")
ggplot(data = my_df, aes(x = Date, y = Alter_John_function))+
geom_line()+
#my_vector_ts <- ts(data = my_vector, start = c(1993, 10, 25),
#                  frequency = 1, names = "ATVI Open")
ggplot(data = my_df, aes(x = Date, y = Alter_John_function))+
geom_line()
#my_vector_ts <- ts(data = my_vector, start = c(1993, 10, 25),
#                  frequency = 1, names = "ATVI Open")
ggplot(data = my_df, aes(x = Date, y = Alter_John_function))+
geom_line()
months(my_df.Date[1])
months(my_df.[,'Date'][1])
months(my_df[,'Date'][1])
month(my_df[,'Date'][1])
